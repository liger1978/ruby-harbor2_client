=begin
#Harbor API

#These APIs provide services for manipulating Harbor project.

OpenAPI spec version: 2.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.22

=end

require 'spec_helper'
require 'json'

# Unit tests for Harbor2Client::RetentionApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'RetentionApi' do
  before do
    # run before each test
    @instance = Harbor2Client::RetentionApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of RetentionApi' do
    it 'should create an instance of RetentionApi' do
      expect(@instance).to be_instance_of(Harbor2Client::RetentionApi)
    end
  end

  # unit tests for create_retention
  # Create Retention Policy
  # Create Retention Policy, you can reference metadatas API for the policy model. You can check project metadatas to find whether a retention policy is already binded. This method should only be called when no retention policy binded to project yet.
  # @param policy Create Retention Policy successfully.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_request_id An unique ID for the request
  # @return [nil]
  describe 'create_retention test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_retention
  # Delete Retention Policy
  # Delete Retention Policy, you can reference metadatas API for the policy model. You can check project metadatas to find whether a retention policy is already binded. This method should only be called when retention policy has already binded to project.
  # @param id Retention ID.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_request_id An unique ID for the request
  # @return [nil]
  describe 'delete_retention test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_rentenition_metadata
  # Get Retention Metadatas
  # Get Retention Metadatas.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_request_id An unique ID for the request
  # @return [RetentionMetadata]
  describe 'get_rentenition_metadata test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_retention
  # Get Retention Policy
  # Get Retention Policy.
  # @param id Retention ID.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_request_id An unique ID for the request
  # @return [RetentionPolicy]
  describe 'get_retention test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_retention_task_log
  # Get Retention job task log
  # Get Retention job task log, tags ratain or deletion detail will be shown in a table.
  # @param id Retention ID.
  # @param eid Retention execution ID.
  # @param tid Retention execution ID.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_request_id An unique ID for the request
  # @return [String]
  describe 'get_retention_task_log test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_retention_executions
  # Get Retention executions
  # Get Retention executions, execution status may be delayed before job service schedule it up.
  # @param id Retention ID.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_request_id An unique ID for the request
  # @option opts [Integer] :page The page number.
  # @option opts [Integer] :page_size The size of per page.
  # @return [Array<RetentionExecution>]
  describe 'list_retention_executions test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_retention_tasks
  # Get Retention tasks
  # Get Retention tasks, each repository as a task.
  # @param id Retention ID.
  # @param eid Retention execution ID.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_request_id An unique ID for the request
  # @option opts [Integer] :page The page number.
  # @option opts [Integer] :page_size The size of per page.
  # @return [Array<RetentionExecutionTask>]
  describe 'list_retention_tasks test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for operate_retention_execution
  # Stop a Retention execution
  # Stop a Retention execution, only support \&quot;stop\&quot; action now.
  # @param id Retention ID.
  # @param eid Retention execution ID.
  # @param body The action, only support \&quot;stop\&quot; now.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_request_id An unique ID for the request
  # @return [nil]
  describe 'operate_retention_execution test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for trigger_retention_execution
  # Trigger a Retention Execution
  # Trigger a Retention Execution, if dry_run is True, nothing would be deleted actually.
  # @param id Retention ID.
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_request_id An unique ID for the request
  # @return [nil]
  describe 'trigger_retention_execution test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_retention
  # Update Retention Policy
  # Update Retention Policy, you can reference metadatas API for the policy model. You can check project metadatas to find whether a retention policy is already binded. This method should only be called when retention policy has already binded to project.
  # @param id Retention ID.
  # @param policy 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_request_id An unique ID for the request
  # @return [nil]
  describe 'update_retention test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
