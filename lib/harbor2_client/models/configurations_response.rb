=begin
#Harbor API

#These APIs provide services for manipulating Harbor project.

OpenAPI spec version: 2.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.22

=end

require 'date'

module Harbor2Client
  class ConfigurationsResponse
    # The auth mode of current system, such as \"db_auth\", \"ldap_auth\", \"oidc_auth\"
    attr_accessor :auth_mode

    # The sender name for Email notification.
    attr_accessor :email_from

    # The hostname of SMTP server that sends Email notification.
    attr_accessor :email_host

    # By default it's empty so the email_username is picked
    attr_accessor :email_identity

    # Whether or not the certificate will be verified when Harbor tries to access the email server.
    attr_accessor :email_insecure

    # The port of SMTP server
    attr_accessor :email_port

    # When it''s set to true the system will access Email server via TLS by default.  If it''s set to false, it still will handle \"STARTTLS\" from server side.
    attr_accessor :email_ssl

    # The username for authenticate against SMTP server
    attr_accessor :email_username

    # The Base DN for LDAP binding.
    attr_accessor :ldap_base_dn

    # The filter for LDAP search
    attr_accessor :ldap_filter

    # The base DN to search LDAP group.
    attr_accessor :ldap_group_base_dn

    # Specify the ldap group which have the same privilege with Harbor admin
    attr_accessor :ldap_group_admin_dn

    # The attribute which is used as identity of the LDAP group, default is cn.'
    attr_accessor :ldap_group_attribute_name

    # The filter to search the ldap group
    attr_accessor :ldap_group_search_filter

    # The scope to search ldap group. ''0-LDAP_SCOPE_BASE, 1-LDAP_SCOPE_ONELEVEL, 2-LDAP_SCOPE_SUBTREE''
    attr_accessor :ldap_group_search_scope

    # The scope to search ldap users,'0-LDAP_SCOPE_BASE, 1-LDAP_SCOPE_ONELEVEL, 2-LDAP_SCOPE_SUBTREE'
    attr_accessor :ldap_scope

    # The DN of the user to do the search.
    attr_accessor :ldap_search_dn

    # Timeout in seconds for connection to LDAP server
    attr_accessor :ldap_timeout

    # The attribute which is used as identity for the LDAP binding, such as \"CN\" or \"SAMAccountname\"
    attr_accessor :ldap_uid

    # The URL of LDAP server
    attr_accessor :ldap_url

    # Whether verify your OIDC server certificate, disable it if your OIDC server is hosted via self-hosted certificate.
    attr_accessor :ldap_verify_cert

    # The user attribute to identify the group membership
    attr_accessor :ldap_group_membership_attribute

    # Indicate who can create projects, it could be ''adminonly'' or ''everyone''.
    attr_accessor :project_creation_restriction

    # The flag to indicate whether Harbor is in readonly mode.
    attr_accessor :read_only

    # Whether the Harbor instance supports self-registration.  If it''s set to false, admin need to add user to the instance.
    attr_accessor :self_registration

    # The expiration time of the token for internal Registry, in minutes.
    attr_accessor :token_expiration

    # The client id of UAA
    attr_accessor :uaa_client_id

    # The client secret of the UAA
    attr_accessor :uaa_client_secret

    # The endpoint of the UAA
    attr_accessor :uaa_endpoint

    # Verify the certificate in UAA server
    attr_accessor :uaa_verify_cert

    # The endpoint of the HTTP auth
    attr_accessor :http_authproxy_endpoint

    # The token review endpoint
    attr_accessor :http_authproxy_tokenreview_endpoint

    # The group which has the harbor admin privileges
    attr_accessor :http_authproxy_admin_groups

    # The usernames which has the harbor admin privileges
    attr_accessor :http_authproxy_admin_usernames

    # Verify the HTTP auth provider's certificate
    attr_accessor :http_authproxy_verify_cert

    # Search user before onboard
    attr_accessor :http_authproxy_skip_search

    # The certificate of the HTTP auth provider
    attr_accessor :http_authproxy_server_certificate

    # The OIDC provider name
    attr_accessor :oidc_name

    # The endpoint of the OIDC provider
    attr_accessor :oidc_endpoint

    # The client ID of the OIDC provider
    attr_accessor :oidc_client_id

    # The attribute claims the group name
    attr_accessor :oidc_groups_claim

    # The OIDC group which has the harbor admin privileges
    attr_accessor :oidc_admin_group

    # The scope of the OIDC provider
    attr_accessor :oidc_scope

    # The attribute claims the username
    attr_accessor :oidc_user_claim

    # Verify the OIDC provider's certificate'
    attr_accessor :oidc_verify_cert

    # Auto onboard the OIDC user
    attr_accessor :oidc_auto_onboard

    # Extra parameters to add when redirect request to OIDC provider
    attr_accessor :oidc_extra_redirect_parms

    # The robot account token duration in days
    attr_accessor :robot_token_duration

    # The rebot account name prefix
    attr_accessor :robot_name_prefix

    # Enable notification
    attr_accessor :notification_enable

    # Enable quota per project
    attr_accessor :quota_per_project_enable

    # The storage quota per project
    attr_accessor :storage_per_project

    attr_accessor :scan_all_policy

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'auth_mode' => :'auth_mode',
        :'email_from' => :'email_from',
        :'email_host' => :'email_host',
        :'email_identity' => :'email_identity',
        :'email_insecure' => :'email_insecure',
        :'email_port' => :'email_port',
        :'email_ssl' => :'email_ssl',
        :'email_username' => :'email_username',
        :'ldap_base_dn' => :'ldap_base_dn',
        :'ldap_filter' => :'ldap_filter',
        :'ldap_group_base_dn' => :'ldap_group_base_dn',
        :'ldap_group_admin_dn' => :'ldap_group_admin_dn',
        :'ldap_group_attribute_name' => :'ldap_group_attribute_name',
        :'ldap_group_search_filter' => :'ldap_group_search_filter',
        :'ldap_group_search_scope' => :'ldap_group_search_scope',
        :'ldap_scope' => :'ldap_scope',
        :'ldap_search_dn' => :'ldap_search_dn',
        :'ldap_timeout' => :'ldap_timeout',
        :'ldap_uid' => :'ldap_uid',
        :'ldap_url' => :'ldap_url',
        :'ldap_verify_cert' => :'ldap_verify_cert',
        :'ldap_group_membership_attribute' => :'ldap_group_membership_attribute',
        :'project_creation_restriction' => :'project_creation_restriction',
        :'read_only' => :'read_only',
        :'self_registration' => :'self_registration',
        :'token_expiration' => :'token_expiration',
        :'uaa_client_id' => :'uaa_client_id',
        :'uaa_client_secret' => :'uaa_client_secret',
        :'uaa_endpoint' => :'uaa_endpoint',
        :'uaa_verify_cert' => :'uaa_verify_cert',
        :'http_authproxy_endpoint' => :'http_authproxy_endpoint',
        :'http_authproxy_tokenreview_endpoint' => :'http_authproxy_tokenreview_endpoint',
        :'http_authproxy_admin_groups' => :'http_authproxy_admin_groups',
        :'http_authproxy_admin_usernames' => :'http_authproxy_admin_usernames',
        :'http_authproxy_verify_cert' => :'http_authproxy_verify_cert',
        :'http_authproxy_skip_search' => :'http_authproxy_skip_search',
        :'http_authproxy_server_certificate' => :'http_authproxy_server_certificate',
        :'oidc_name' => :'oidc_name',
        :'oidc_endpoint' => :'oidc_endpoint',
        :'oidc_client_id' => :'oidc_client_id',
        :'oidc_groups_claim' => :'oidc_groups_claim',
        :'oidc_admin_group' => :'oidc_admin_group',
        :'oidc_scope' => :'oidc_scope',
        :'oidc_user_claim' => :'oidc_user_claim',
        :'oidc_verify_cert' => :'oidc_verify_cert',
        :'oidc_auto_onboard' => :'oidc_auto_onboard',
        :'oidc_extra_redirect_parms' => :'oidc_extra_redirect_parms',
        :'robot_token_duration' => :'robot_token_duration',
        :'robot_name_prefix' => :'robot_name_prefix',
        :'notification_enable' => :'notification_enable',
        :'quota_per_project_enable' => :'quota_per_project_enable',
        :'storage_per_project' => :'storage_per_project',
        :'scan_all_policy' => :'scan_all_policy'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'auth_mode' => :'StringConfigItem',
        :'email_from' => :'StringConfigItem',
        :'email_host' => :'StringConfigItem',
        :'email_identity' => :'StringConfigItem',
        :'email_insecure' => :'BoolConfigItem',
        :'email_port' => :'IntegerConfigItem',
        :'email_ssl' => :'BoolConfigItem',
        :'email_username' => :'StringConfigItem',
        :'ldap_base_dn' => :'StringConfigItem',
        :'ldap_filter' => :'StringConfigItem',
        :'ldap_group_base_dn' => :'StringConfigItem',
        :'ldap_group_admin_dn' => :'StringConfigItem',
        :'ldap_group_attribute_name' => :'StringConfigItem',
        :'ldap_group_search_filter' => :'StringConfigItem',
        :'ldap_group_search_scope' => :'IntegerConfigItem',
        :'ldap_scope' => :'IntegerConfigItem',
        :'ldap_search_dn' => :'StringConfigItem',
        :'ldap_timeout' => :'IntegerConfigItem',
        :'ldap_uid' => :'StringConfigItem',
        :'ldap_url' => :'StringConfigItem',
        :'ldap_verify_cert' => :'BoolConfigItem',
        :'ldap_group_membership_attribute' => :'StringConfigItem',
        :'project_creation_restriction' => :'StringConfigItem',
        :'read_only' => :'BoolConfigItem',
        :'self_registration' => :'BoolConfigItem',
        :'token_expiration' => :'IntegerConfigItem',
        :'uaa_client_id' => :'StringConfigItem',
        :'uaa_client_secret' => :'StringConfigItem',
        :'uaa_endpoint' => :'StringConfigItem',
        :'uaa_verify_cert' => :'BoolConfigItem',
        :'http_authproxy_endpoint' => :'StringConfigItem',
        :'http_authproxy_tokenreview_endpoint' => :'StringConfigItem',
        :'http_authproxy_admin_groups' => :'StringConfigItem',
        :'http_authproxy_admin_usernames' => :'StringConfigItem',
        :'http_authproxy_verify_cert' => :'BoolConfigItem',
        :'http_authproxy_skip_search' => :'BoolConfigItem',
        :'http_authproxy_server_certificate' => :'StringConfigItem',
        :'oidc_name' => :'StringConfigItem',
        :'oidc_endpoint' => :'StringConfigItem',
        :'oidc_client_id' => :'StringConfigItem',
        :'oidc_groups_claim' => :'StringConfigItem',
        :'oidc_admin_group' => :'StringConfigItem',
        :'oidc_scope' => :'StringConfigItem',
        :'oidc_user_claim' => :'StringConfigItem',
        :'oidc_verify_cert' => :'BoolConfigItem',
        :'oidc_auto_onboard' => :'BoolConfigItem',
        :'oidc_extra_redirect_parms' => :'StringConfigItem',
        :'robot_token_duration' => :'IntegerConfigItem',
        :'robot_name_prefix' => :'StringConfigItem',
        :'notification_enable' => :'BoolConfigItem',
        :'quota_per_project_enable' => :'BoolConfigItem',
        :'storage_per_project' => :'IntegerConfigItem',
        :'scan_all_policy' => :'ConfigurationsResponseScanAllPolicy'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'auth_mode')
        self.auth_mode = attributes[:'auth_mode']
      end

      if attributes.has_key?(:'email_from')
        self.email_from = attributes[:'email_from']
      end

      if attributes.has_key?(:'email_host')
        self.email_host = attributes[:'email_host']
      end

      if attributes.has_key?(:'email_identity')
        self.email_identity = attributes[:'email_identity']
      end

      if attributes.has_key?(:'email_insecure')
        self.email_insecure = attributes[:'email_insecure']
      end

      if attributes.has_key?(:'email_port')
        self.email_port = attributes[:'email_port']
      end

      if attributes.has_key?(:'email_ssl')
        self.email_ssl = attributes[:'email_ssl']
      end

      if attributes.has_key?(:'email_username')
        self.email_username = attributes[:'email_username']
      end

      if attributes.has_key?(:'ldap_base_dn')
        self.ldap_base_dn = attributes[:'ldap_base_dn']
      end

      if attributes.has_key?(:'ldap_filter')
        self.ldap_filter = attributes[:'ldap_filter']
      end

      if attributes.has_key?(:'ldap_group_base_dn')
        self.ldap_group_base_dn = attributes[:'ldap_group_base_dn']
      end

      if attributes.has_key?(:'ldap_group_admin_dn')
        self.ldap_group_admin_dn = attributes[:'ldap_group_admin_dn']
      end

      if attributes.has_key?(:'ldap_group_attribute_name')
        self.ldap_group_attribute_name = attributes[:'ldap_group_attribute_name']
      end

      if attributes.has_key?(:'ldap_group_search_filter')
        self.ldap_group_search_filter = attributes[:'ldap_group_search_filter']
      end

      if attributes.has_key?(:'ldap_group_search_scope')
        self.ldap_group_search_scope = attributes[:'ldap_group_search_scope']
      end

      if attributes.has_key?(:'ldap_scope')
        self.ldap_scope = attributes[:'ldap_scope']
      end

      if attributes.has_key?(:'ldap_search_dn')
        self.ldap_search_dn = attributes[:'ldap_search_dn']
      end

      if attributes.has_key?(:'ldap_timeout')
        self.ldap_timeout = attributes[:'ldap_timeout']
      end

      if attributes.has_key?(:'ldap_uid')
        self.ldap_uid = attributes[:'ldap_uid']
      end

      if attributes.has_key?(:'ldap_url')
        self.ldap_url = attributes[:'ldap_url']
      end

      if attributes.has_key?(:'ldap_verify_cert')
        self.ldap_verify_cert = attributes[:'ldap_verify_cert']
      end

      if attributes.has_key?(:'ldap_group_membership_attribute')
        self.ldap_group_membership_attribute = attributes[:'ldap_group_membership_attribute']
      end

      if attributes.has_key?(:'project_creation_restriction')
        self.project_creation_restriction = attributes[:'project_creation_restriction']
      end

      if attributes.has_key?(:'read_only')
        self.read_only = attributes[:'read_only']
      end

      if attributes.has_key?(:'self_registration')
        self.self_registration = attributes[:'self_registration']
      end

      if attributes.has_key?(:'token_expiration')
        self.token_expiration = attributes[:'token_expiration']
      end

      if attributes.has_key?(:'uaa_client_id')
        self.uaa_client_id = attributes[:'uaa_client_id']
      end

      if attributes.has_key?(:'uaa_client_secret')
        self.uaa_client_secret = attributes[:'uaa_client_secret']
      end

      if attributes.has_key?(:'uaa_endpoint')
        self.uaa_endpoint = attributes[:'uaa_endpoint']
      end

      if attributes.has_key?(:'uaa_verify_cert')
        self.uaa_verify_cert = attributes[:'uaa_verify_cert']
      end

      if attributes.has_key?(:'http_authproxy_endpoint')
        self.http_authproxy_endpoint = attributes[:'http_authproxy_endpoint']
      end

      if attributes.has_key?(:'http_authproxy_tokenreview_endpoint')
        self.http_authproxy_tokenreview_endpoint = attributes[:'http_authproxy_tokenreview_endpoint']
      end

      if attributes.has_key?(:'http_authproxy_admin_groups')
        self.http_authproxy_admin_groups = attributes[:'http_authproxy_admin_groups']
      end

      if attributes.has_key?(:'http_authproxy_admin_usernames')
        self.http_authproxy_admin_usernames = attributes[:'http_authproxy_admin_usernames']
      end

      if attributes.has_key?(:'http_authproxy_verify_cert')
        self.http_authproxy_verify_cert = attributes[:'http_authproxy_verify_cert']
      end

      if attributes.has_key?(:'http_authproxy_skip_search')
        self.http_authproxy_skip_search = attributes[:'http_authproxy_skip_search']
      end

      if attributes.has_key?(:'http_authproxy_server_certificate')
        self.http_authproxy_server_certificate = attributes[:'http_authproxy_server_certificate']
      end

      if attributes.has_key?(:'oidc_name')
        self.oidc_name = attributes[:'oidc_name']
      end

      if attributes.has_key?(:'oidc_endpoint')
        self.oidc_endpoint = attributes[:'oidc_endpoint']
      end

      if attributes.has_key?(:'oidc_client_id')
        self.oidc_client_id = attributes[:'oidc_client_id']
      end

      if attributes.has_key?(:'oidc_groups_claim')
        self.oidc_groups_claim = attributes[:'oidc_groups_claim']
      end

      if attributes.has_key?(:'oidc_admin_group')
        self.oidc_admin_group = attributes[:'oidc_admin_group']
      end

      if attributes.has_key?(:'oidc_scope')
        self.oidc_scope = attributes[:'oidc_scope']
      end

      if attributes.has_key?(:'oidc_user_claim')
        self.oidc_user_claim = attributes[:'oidc_user_claim']
      end

      if attributes.has_key?(:'oidc_verify_cert')
        self.oidc_verify_cert = attributes[:'oidc_verify_cert']
      end

      if attributes.has_key?(:'oidc_auto_onboard')
        self.oidc_auto_onboard = attributes[:'oidc_auto_onboard']
      end

      if attributes.has_key?(:'oidc_extra_redirect_parms')
        self.oidc_extra_redirect_parms = attributes[:'oidc_extra_redirect_parms']
      end

      if attributes.has_key?(:'robot_token_duration')
        self.robot_token_duration = attributes[:'robot_token_duration']
      end

      if attributes.has_key?(:'robot_name_prefix')
        self.robot_name_prefix = attributes[:'robot_name_prefix']
      end

      if attributes.has_key?(:'notification_enable')
        self.notification_enable = attributes[:'notification_enable']
      end

      if attributes.has_key?(:'quota_per_project_enable')
        self.quota_per_project_enable = attributes[:'quota_per_project_enable']
      end

      if attributes.has_key?(:'storage_per_project')
        self.storage_per_project = attributes[:'storage_per_project']
      end

      if attributes.has_key?(:'scan_all_policy')
        self.scan_all_policy = attributes[:'scan_all_policy']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          auth_mode == o.auth_mode &&
          email_from == o.email_from &&
          email_host == o.email_host &&
          email_identity == o.email_identity &&
          email_insecure == o.email_insecure &&
          email_port == o.email_port &&
          email_ssl == o.email_ssl &&
          email_username == o.email_username &&
          ldap_base_dn == o.ldap_base_dn &&
          ldap_filter == o.ldap_filter &&
          ldap_group_base_dn == o.ldap_group_base_dn &&
          ldap_group_admin_dn == o.ldap_group_admin_dn &&
          ldap_group_attribute_name == o.ldap_group_attribute_name &&
          ldap_group_search_filter == o.ldap_group_search_filter &&
          ldap_group_search_scope == o.ldap_group_search_scope &&
          ldap_scope == o.ldap_scope &&
          ldap_search_dn == o.ldap_search_dn &&
          ldap_timeout == o.ldap_timeout &&
          ldap_uid == o.ldap_uid &&
          ldap_url == o.ldap_url &&
          ldap_verify_cert == o.ldap_verify_cert &&
          ldap_group_membership_attribute == o.ldap_group_membership_attribute &&
          project_creation_restriction == o.project_creation_restriction &&
          read_only == o.read_only &&
          self_registration == o.self_registration &&
          token_expiration == o.token_expiration &&
          uaa_client_id == o.uaa_client_id &&
          uaa_client_secret == o.uaa_client_secret &&
          uaa_endpoint == o.uaa_endpoint &&
          uaa_verify_cert == o.uaa_verify_cert &&
          http_authproxy_endpoint == o.http_authproxy_endpoint &&
          http_authproxy_tokenreview_endpoint == o.http_authproxy_tokenreview_endpoint &&
          http_authproxy_admin_groups == o.http_authproxy_admin_groups &&
          http_authproxy_admin_usernames == o.http_authproxy_admin_usernames &&
          http_authproxy_verify_cert == o.http_authproxy_verify_cert &&
          http_authproxy_skip_search == o.http_authproxy_skip_search &&
          http_authproxy_server_certificate == o.http_authproxy_server_certificate &&
          oidc_name == o.oidc_name &&
          oidc_endpoint == o.oidc_endpoint &&
          oidc_client_id == o.oidc_client_id &&
          oidc_groups_claim == o.oidc_groups_claim &&
          oidc_admin_group == o.oidc_admin_group &&
          oidc_scope == o.oidc_scope &&
          oidc_user_claim == o.oidc_user_claim &&
          oidc_verify_cert == o.oidc_verify_cert &&
          oidc_auto_onboard == o.oidc_auto_onboard &&
          oidc_extra_redirect_parms == o.oidc_extra_redirect_parms &&
          robot_token_duration == o.robot_token_duration &&
          robot_name_prefix == o.robot_name_prefix &&
          notification_enable == o.notification_enable &&
          quota_per_project_enable == o.quota_per_project_enable &&
          storage_per_project == o.storage_per_project &&
          scan_all_policy == o.scan_all_policy
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [auth_mode, email_from, email_host, email_identity, email_insecure, email_port, email_ssl, email_username, ldap_base_dn, ldap_filter, ldap_group_base_dn, ldap_group_admin_dn, ldap_group_attribute_name, ldap_group_search_filter, ldap_group_search_scope, ldap_scope, ldap_search_dn, ldap_timeout, ldap_uid, ldap_url, ldap_verify_cert, ldap_group_membership_attribute, project_creation_restriction, read_only, self_registration, token_expiration, uaa_client_id, uaa_client_secret, uaa_endpoint, uaa_verify_cert, http_authproxy_endpoint, http_authproxy_tokenreview_endpoint, http_authproxy_admin_groups, http_authproxy_admin_usernames, http_authproxy_verify_cert, http_authproxy_skip_search, http_authproxy_server_certificate, oidc_name, oidc_endpoint, oidc_client_id, oidc_groups_claim, oidc_admin_group, oidc_scope, oidc_user_claim, oidc_verify_cert, oidc_auto_onboard, oidc_extra_redirect_parms, robot_token_duration, robot_name_prefix, notification_enable, quota_per_project_enable, storage_per_project, scan_all_policy].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Harbor2Client.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
