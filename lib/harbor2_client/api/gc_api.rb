=begin
#Harbor API

#These APIs provide services for manipulating Harbor project.

OpenAPI spec version: 2.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.22

=end

require 'uri'

module Harbor2Client
  class GcApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a gc schedule.
    # This endpoint is for update gc schedule. 
    # @param schedule Updates of gc&#39;s schedule.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id An unique ID for the request
    # @return [nil]
    def create_gc_schedule(schedule, opts = {})
      create_gc_schedule_with_http_info(schedule, opts)
      nil
    end

    # Create a gc schedule.
    # This endpoint is for update gc schedule. 
    # @param schedule Updates of gc&#39;s schedule.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id An unique ID for the request
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_gc_schedule_with_http_info(schedule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GcApi.create_gc_schedule ...'
      end
      # verify the required parameter 'schedule' is set
      if @api_client.config.client_side_validation && schedule.nil?
        fail ArgumentError, "Missing the required parameter 'schedule' when calling GcApi.create_gc_schedule"
      end
      if @api_client.config.client_side_validation && !opts[:'x_request_id'].nil? && opts[:'x_request_id'].to_s.length < 1
        fail ArgumentError, 'invalid value for "opts[:"x_request_id"]" when calling GcApi.create_gc_schedule, the character length must be great than or equal to 1.'
      end

      # resource path
      local_var_path = '/system/gc/schedule'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Request-Id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(schedule)
      auth_names = ['basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GcApi#create_gc_schedule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get gc status.
    # This endpoint let user get gc status filtered by specific ID.
    # @param gc_id The ID of the gc log
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id An unique ID for the request
    # @return [GCHistory]
    def get_gc(gc_id, opts = {})
      data, _status_code, _headers = get_gc_with_http_info(gc_id, opts)
      data
    end

    # Get gc status.
    # This endpoint let user get gc status filtered by specific ID.
    # @param gc_id The ID of the gc log
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id An unique ID for the request
    # @return [Array<(GCHistory, Fixnum, Hash)>] GCHistory data, response status code and response headers
    def get_gc_with_http_info(gc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GcApi.get_gc ...'
      end
      # verify the required parameter 'gc_id' is set
      if @api_client.config.client_side_validation && gc_id.nil?
        fail ArgumentError, "Missing the required parameter 'gc_id' when calling GcApi.get_gc"
      end
      if @api_client.config.client_side_validation && !opts[:'x_request_id'].nil? && opts[:'x_request_id'].to_s.length < 1
        fail ArgumentError, 'invalid value for "opts[:"x_request_id"]" when calling GcApi.get_gc, the character length must be great than or equal to 1.'
      end

      # resource path
      local_var_path = '/system/gc/{gc_id}'.sub('{' + 'gc_id' + '}', gc_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Request-Id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GCHistory')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GcApi#get_gc\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get gc results.
    # This endpoint let user get gc execution history.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id An unique ID for the request
    # @option opts [String] :q Query string to query resources. Supported query patterns are \&quot;exact match(k&#x3D;v)\&quot;, \&quot;fuzzy match(k&#x3D;~v)\&quot;, \&quot;range(k&#x3D;[min~max])\&quot;, \&quot;list with union releationship(k&#x3D;{v1 v2 v3})\&quot; and \&quot;list with intersetion relationship(k&#x3D;(v1 v2 v3))\&quot;. The value of range and list can be string(enclosed by \&quot; or &#39;), integer or time(in format \&quot;2020-04-09 02:36:00\&quot;). All of these query patterns should be put in the query string \&quot;q&#x3D;xxx\&quot; and splitted by \&quot;,\&quot;. e.g. q&#x3D;k1&#x3D;v1,k2&#x3D;~v2,k3&#x3D;[min~max]
    # @option opts [String] :sort Sort the resource list in ascending or descending order. e.g. sort by field1 in ascending orderr and field2 in descending order with \&quot;sort&#x3D;field1,-field2\&quot;
    # @option opts [Integer] :page The page number (default to 1)
    # @option opts [Integer] :page_size The size of per page (default to 10)
    # @return [Array<GCHistory>]
    def get_gc_history(opts = {})
      data, _status_code, _headers = get_gc_history_with_http_info(opts)
      data
    end

    # Get gc results.
    # This endpoint let user get gc execution history.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id An unique ID for the request
    # @option opts [String] :q Query string to query resources. Supported query patterns are \&quot;exact match(k&#x3D;v)\&quot;, \&quot;fuzzy match(k&#x3D;~v)\&quot;, \&quot;range(k&#x3D;[min~max])\&quot;, \&quot;list with union releationship(k&#x3D;{v1 v2 v3})\&quot; and \&quot;list with intersetion relationship(k&#x3D;(v1 v2 v3))\&quot;. The value of range and list can be string(enclosed by \&quot; or &#39;), integer or time(in format \&quot;2020-04-09 02:36:00\&quot;). All of these query patterns should be put in the query string \&quot;q&#x3D;xxx\&quot; and splitted by \&quot;,\&quot;. e.g. q&#x3D;k1&#x3D;v1,k2&#x3D;~v2,k3&#x3D;[min~max]
    # @option opts [String] :sort Sort the resource list in ascending or descending order. e.g. sort by field1 in ascending orderr and field2 in descending order with \&quot;sort&#x3D;field1,-field2\&quot;
    # @option opts [Integer] :page The page number
    # @option opts [Integer] :page_size The size of per page
    # @return [Array<(Array<GCHistory>, Fixnum, Hash)>] Array<GCHistory> data, response status code and response headers
    def get_gc_history_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GcApi.get_gc_history ...'
      end
      if @api_client.config.client_side_validation && !opts[:'x_request_id'].nil? && opts[:'x_request_id'].to_s.length < 1
        fail ArgumentError, 'invalid value for "opts[:"x_request_id"]" when calling GcApi.get_gc_history, the character length must be great than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 100
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling GcApi.get_gc_history, must be smaller than or equal to 100.'
      end

      # resource path
      local_var_path = '/system/gc'

      # query parameters
      query_params = {}
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Request-Id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<GCHistory>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GcApi#get_gc_history\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get gc job log.
    # This endpoint let user get gc job logs filtered by specific ID.
    # @param gc_id The ID of the gc log
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id An unique ID for the request
    # @return [String]
    def get_gc_log(gc_id, opts = {})
      data, _status_code, _headers = get_gc_log_with_http_info(gc_id, opts)
      data
    end

    # Get gc job log.
    # This endpoint let user get gc job logs filtered by specific ID.
    # @param gc_id The ID of the gc log
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id An unique ID for the request
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def get_gc_log_with_http_info(gc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GcApi.get_gc_log ...'
      end
      # verify the required parameter 'gc_id' is set
      if @api_client.config.client_side_validation && gc_id.nil?
        fail ArgumentError, "Missing the required parameter 'gc_id' when calling GcApi.get_gc_log"
      end
      if @api_client.config.client_side_validation && !opts[:'x_request_id'].nil? && opts[:'x_request_id'].to_s.length < 1
        fail ArgumentError, 'invalid value for "opts[:"x_request_id"]" when calling GcApi.get_gc_log, the character length must be great than or equal to 1.'
      end

      # resource path
      local_var_path = '/system/gc/{gc_id}/log'.sub('{' + 'gc_id' + '}', gc_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Request-Id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GcApi#get_gc_log\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get gc's schedule.
    # This endpoint is for get schedule of gc job.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id An unique ID for the request
    # @return [GCHistory]
    def get_gc_schedule(opts = {})
      data, _status_code, _headers = get_gc_schedule_with_http_info(opts)
      data
    end

    # Get gc&#39;s schedule.
    # This endpoint is for get schedule of gc job.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id An unique ID for the request
    # @return [Array<(GCHistory, Fixnum, Hash)>] GCHistory data, response status code and response headers
    def get_gc_schedule_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GcApi.get_gc_schedule ...'
      end
      if @api_client.config.client_side_validation && !opts[:'x_request_id'].nil? && opts[:'x_request_id'].to_s.length < 1
        fail ArgumentError, 'invalid value for "opts[:"x_request_id"]" when calling GcApi.get_gc_schedule, the character length must be great than or equal to 1.'
      end

      # resource path
      local_var_path = '/system/gc/schedule'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Request-Id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GCHistory')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GcApi#get_gc_schedule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update gc's schedule.
    # This endpoint is for update gc schedule. 
    # @param schedule Updates of gc&#39;s schedule.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id An unique ID for the request
    # @return [nil]
    def update_gc_schedule(schedule, opts = {})
      update_gc_schedule_with_http_info(schedule, opts)
      nil
    end

    # Update gc&#39;s schedule.
    # This endpoint is for update gc schedule. 
    # @param schedule Updates of gc&#39;s schedule.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id An unique ID for the request
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_gc_schedule_with_http_info(schedule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GcApi.update_gc_schedule ...'
      end
      # verify the required parameter 'schedule' is set
      if @api_client.config.client_side_validation && schedule.nil?
        fail ArgumentError, "Missing the required parameter 'schedule' when calling GcApi.update_gc_schedule"
      end
      if @api_client.config.client_side_validation && !opts[:'x_request_id'].nil? && opts[:'x_request_id'].to_s.length < 1
        fail ArgumentError, 'invalid value for "opts[:"x_request_id"]" when calling GcApi.update_gc_schedule, the character length must be great than or equal to 1.'
      end

      # resource path
      local_var_path = '/system/gc/schedule'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Request-Id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(schedule)
      auth_names = ['basic']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GcApi#update_gc_schedule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
