=begin
#Harbor API

#These APIs provide services for manipulating Harbor project.

OpenAPI spec version: 2.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.22

=end

require 'uri'

module Harbor2Client
  class LdapApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Import selected available ldap users.
    # This endpoint adds the selected available ldap users to harbor based on related configuration parameters from the system. System will try to guess the user email address and realname, add to harbor user information. If have errors when import user, will return the list of importing failed uid and the failed reason. 
    # @param uid_list The uid listed for importing. This list will check users validity of ldap service based on configuration from the system.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id An unique ID for the request
    # @return [nil]
    def import_ldap_user(uid_list, opts = {})
      import_ldap_user_with_http_info(uid_list, opts)
      nil
    end

    # Import selected available ldap users.
    # This endpoint adds the selected available ldap users to harbor based on related configuration parameters from the system. System will try to guess the user email address and realname, add to harbor user information. If have errors when import user, will return the list of importing failed uid and the failed reason. 
    # @param uid_list The uid listed for importing. This list will check users validity of ldap service based on configuration from the system.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id An unique ID for the request
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def import_ldap_user_with_http_info(uid_list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LdapApi.import_ldap_user ...'
      end
      # verify the required parameter 'uid_list' is set
      if @api_client.config.client_side_validation && uid_list.nil?
        fail ArgumentError, "Missing the required parameter 'uid_list' when calling LdapApi.import_ldap_user"
      end
      if @api_client.config.client_side_validation && !opts[:'x_request_id'].nil? && opts[:'x_request_id'].to_s.length < 1
        fail ArgumentError, 'invalid value for "opts[:"x_request_id"]" when calling LdapApi.import_ldap_user, the character length must be great than or equal to 1.'
      end

      # resource path
      local_var_path = '/ldap/users/import'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Request-Id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(uid_list)
      auth_names = ['basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LdapApi#import_ldap_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Ping available ldap service.
    # This endpoint ping the available ldap service for test related configuration parameters. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id An unique ID for the request
    # @option opts [LdapConf] :ldapconf ldap configuration. support input ldap service configuration. If it is a empty request, will load current configuration from the system.
    # @return [LdapPingResult]
    def ping_ldap(opts = {})
      data, _status_code, _headers = ping_ldap_with_http_info(opts)
      data
    end

    # Ping available ldap service.
    # This endpoint ping the available ldap service for test related configuration parameters. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id An unique ID for the request
    # @option opts [LdapConf] :ldapconf ldap configuration. support input ldap service configuration. If it is a empty request, will load current configuration from the system.
    # @return [Array<(LdapPingResult, Fixnum, Hash)>] LdapPingResult data, response status code and response headers
    def ping_ldap_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LdapApi.ping_ldap ...'
      end
      if @api_client.config.client_side_validation && !opts[:'x_request_id'].nil? && opts[:'x_request_id'].to_s.length < 1
        fail ArgumentError, 'invalid value for "opts[:"x_request_id"]" when calling LdapApi.ping_ldap, the character length must be great than or equal to 1.'
      end

      # resource path
      local_var_path = '/ldap/ping'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Request-Id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'ldapconf'])
      auth_names = ['basic']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LdapPingResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LdapApi#ping_ldap\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Search available ldap groups.
    # This endpoint searches the available ldap groups based on related configuration parameters. support to search by groupname or groupdn. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id An unique ID for the request
    # @option opts [String] :groupname Ldap group name
    # @option opts [String] :groupdn The LDAP group DN
    # @return [Array<UserGroup>]
    def search_ldap_group(opts = {})
      data, _status_code, _headers = search_ldap_group_with_http_info(opts)
      data
    end

    # Search available ldap groups.
    # This endpoint searches the available ldap groups based on related configuration parameters. support to search by groupname or groupdn. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id An unique ID for the request
    # @option opts [String] :groupname Ldap group name
    # @option opts [String] :groupdn The LDAP group DN
    # @return [Array<(Array<UserGroup>, Fixnum, Hash)>] Array<UserGroup> data, response status code and response headers
    def search_ldap_group_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LdapApi.search_ldap_group ...'
      end
      if @api_client.config.client_side_validation && !opts[:'x_request_id'].nil? && opts[:'x_request_id'].to_s.length < 1
        fail ArgumentError, 'invalid value for "opts[:"x_request_id"]" when calling LdapApi.search_ldap_group, the character length must be great than or equal to 1.'
      end

      # resource path
      local_var_path = '/ldap/groups/search'

      # query parameters
      query_params = {}
      query_params[:'groupname'] = opts[:'groupname'] if !opts[:'groupname'].nil?
      query_params[:'groupdn'] = opts[:'groupdn'] if !opts[:'groupdn'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Request-Id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<UserGroup>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LdapApi#search_ldap_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Search available ldap users.
    # This endpoint searches the available ldap users based on related configuration parameters. Support searched by input ladp configuration, load configuration from the system and specific filter. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id An unique ID for the request
    # @option opts [String] :username Registered user ID
    # @return [Array<LdapUser>]
    def search_ldap_user(opts = {})
      data, _status_code, _headers = search_ldap_user_with_http_info(opts)
      data
    end

    # Search available ldap users.
    # This endpoint searches the available ldap users based on related configuration parameters. Support searched by input ladp configuration, load configuration from the system and specific filter. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id An unique ID for the request
    # @option opts [String] :username Registered user ID
    # @return [Array<(Array<LdapUser>, Fixnum, Hash)>] Array<LdapUser> data, response status code and response headers
    def search_ldap_user_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LdapApi.search_ldap_user ...'
      end
      if @api_client.config.client_side_validation && !opts[:'x_request_id'].nil? && opts[:'x_request_id'].to_s.length < 1
        fail ArgumentError, 'invalid value for "opts[:"x_request_id"]" when calling LdapApi.search_ldap_user, the character length must be great than or equal to 1.'
      end

      # resource path
      local_var_path = '/ldap/users/search'

      # query parameters
      query_params = {}
      query_params[:'username'] = opts[:'username'] if !opts[:'username'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Request-Id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<LdapUser>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LdapApi#search_ldap_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
